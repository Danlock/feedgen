// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewFeedgenViewMangaParams creates a new FeedgenViewMangaParams object
// with the default values initialized.
func NewFeedgenViewMangaParams() FeedgenViewMangaParams {

	var (
		// initialize parameters with default values

		feedTypeDefault = string("atom")
	)

	return FeedgenViewMangaParams{
		FeedType: &feedTypeDefault,
	}
}

// FeedgenViewMangaParams contains all the bound params for the feedgen view manga operation
// typically these are obtained from a http.Request
//
// swagger:parameters feedgen#viewManga
type FeedgenViewMangaParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*RSS, Atom, or JSON Feed
	  In: query
	  Default: "atom"
	*/
	FeedType *string
	/*Identifier of previously created manga feed
	  Required: true
	  In: path
	*/
	Hash string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewFeedgenViewMangaParams() beforehand.
func (o *FeedgenViewMangaParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qFeedType, qhkFeedType, _ := qs.GetOK("feedType")
	if err := o.bindFeedType(qFeedType, qhkFeedType, route.Formats); err != nil {
		res = append(res, err)
	}

	rHash, rhkHash, _ := route.Params.GetOK("hash")
	if err := o.bindHash(rHash, rhkHash, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindFeedType binds and validates parameter FeedType from query.
func (o *FeedgenViewMangaParams) bindFeedType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewFeedgenViewMangaParams()
		return nil
	}

	o.FeedType = &raw

	if err := o.validateFeedType(formats); err != nil {
		return err
	}

	return nil
}

// validateFeedType carries on validations for parameter FeedType
func (o *FeedgenViewMangaParams) validateFeedType(formats strfmt.Registry) error {

	if err := validate.Enum("feedType", "query", *o.FeedType, []interface{}{"rss", "atom", "json"}); err != nil {
		return err
	}

	return nil
}

// bindHash binds and validates parameter Hash from path.
func (o *FeedgenViewMangaParams) bindHash(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Hash = raw

	return nil
}
