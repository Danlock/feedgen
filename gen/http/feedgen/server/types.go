// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// feedgen HTTP server types
//
// Command:
// $ goa gen github.com/danlock/go-rss-gen/design

package server

import (
	feedgen "github.com/danlock/go-rss-gen/gen/feedgen"
	goa "goa.design/goa"
)

// MangaRequestBody is the type of the "feedgen" service "manga" endpoint HTTP
// request body.
type MangaRequestBody struct {
	// List of manga titles to subscribe to
	Titles []string `form:"titles,omitempty" json:"titles,omitempty" xml:"titles,omitempty"`
}

// NewMangaPayload builds a feedgen service manga endpoint payload.
func NewMangaPayload(body *MangaRequestBody, feedType string) *feedgen.MangaPayload {
	v := &feedgen.MangaPayload{}
	v.Titles = make([]string, len(body.Titles))
	for i, val := range body.Titles {
		v.Titles[i] = val
	}
	v.FeedType = feedType
	return v
}

// NewViewMangaPayload builds a feedgen service viewManga endpoint payload.
func NewViewMangaPayload(hash string) *feedgen.ViewMangaPayload {
	return &feedgen.ViewMangaPayload{
		Hash: hash,
	}
}

// ValidateMangaRequestBody runs the validations defined on MangaRequestBody
func ValidateMangaRequestBody(body *MangaRequestBody) (err error) {
	if body.Titles == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("titles", "body"))
	}
	if len(body.Titles) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.titles", body.Titles, len(body.Titles), 1, true))
	}
	if len(body.Titles) > 65535 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.titles", body.Titles, len(body.Titles), 65535, false))
	}
	return
}
