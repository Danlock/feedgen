// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// feedgen HTTP server
//
// Command:
// $ goa gen github.com/danlock/go-rss-gen/design

package server

import (
	"context"
	"net/http"

	feedgen "github.com/danlock/go-rss-gen/gen/feedgen"
	goa "goa.design/goa"
	goahttp "goa.design/goa/http"
)

// Server lists the feedgen service endpoint HTTP handlers.
type Server struct {
	Mounts    []*MountPoint
	Manga     http.Handler
	ViewManga http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the feedgen service endpoints.
func New(
	e *feedgen.Endpoints,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"Manga", "POST", "/feed/manga"},
			{"ViewManga", "GET", "/feed/manga/{hash}"},
		},
		Manga:     NewMangaHandler(e.Manga, mux, dec, enc, eh),
		ViewManga: NewViewMangaHandler(e.ViewManga, mux, dec, enc, eh),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "feedgen" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Manga = m(s.Manga)
	s.ViewManga = m(s.ViewManga)
}

// Mount configures the mux to serve the feedgen endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountMangaHandler(mux, h.Manga)
	MountViewMangaHandler(mux, h.ViewManga)
}

// MountMangaHandler configures the mux to serve the "feedgen" service "manga"
// endpoint.
func MountMangaHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/feed/manga", f)
}

// NewMangaHandler creates a HTTP handler which loads the HTTP request and
// calls the "feedgen" service "manga" endpoint.
func NewMangaHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeMangaRequest(mux, dec)
		encodeResponse = EncodeMangaResponse(enc)
		encodeError    = EncodeMangaError(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "manga")
		ctx = context.WithValue(ctx, goa.ServiceKey, "feedgen")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountViewMangaHandler configures the mux to serve the "feedgen" service
// "viewManga" endpoint.
func MountViewMangaHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/feed/manga/{hash}", f)
}

// NewViewMangaHandler creates a HTTP handler which loads the HTTP request and
// calls the "feedgen" service "viewManga" endpoint.
func NewViewMangaHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeViewMangaRequest(mux, dec)
		encodeResponse = EncodeViewMangaResponse(enc)
		encodeError    = EncodeViewMangaError(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "viewManga")
		ctx = context.WithValue(ctx, goa.ServiceKey, "feedgen")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}
